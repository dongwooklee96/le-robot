From eb2456ebd89ab9dffb6f7d631a69abee2ef2cb3c Mon Sep 17 00:00:00 2001
From: DongWook Lee <sh95119@gmail.com>
Date: Sat, 14 Jun 2025 23:24:08 +0900
Subject: [PATCH] =?UTF-8?q?FEAT:=20so101=20=20=EB=B0=94=EC=9D=B4=EB=A9=94?=
 =?UTF-8?q?=EB=89=B4=EC=96=BC?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

---
 .../bimanual_so100_follower/__init__.py       |   2 +
 .../bimanual_so100_follower.py                | 154 ++++++++++++++++++
 .../config_bimanual_so100_follower.py         |  51 ++++++
 .../bimanual_so101_follower/__init__.py       |   3 +
 .../bimanual_so101_follower.py                | 154 ++++++++++++++++++
 .../config_bimanual_so101_follower.py         |  51 ++++++
 lerobot/common/robots/utils.py                |   8 +
 .../bimanual_so100_leader/__init__.py         |   2 +
 .../bimanual_so100_leader.py                  | 110 +++++++++++++
 .../config_bimanual_so100_leader.py           |  36 ++++
 .../bimanual_so101_leader/__init__.py         |   3 +
 .../bimanual_so101_leader.py                  | 109 +++++++++++++
 .../config_bimanual_so101_leader.py           |  36 ++++
 lerobot/common/teleoperators/utils.py         |   8 +
 lerobot/record.py                             |   3 +-
 lerobot/teleoperate.py                        |   3 +-
 16 files changed, 731 insertions(+), 2 deletions(-)
 create mode 100644 lerobot/common/robots/bimanual_so100_follower/__init__.py
 create mode 100644 lerobot/common/robots/bimanual_so100_follower/bimanual_so100_follower.py
 create mode 100644 lerobot/common/robots/bimanual_so100_follower/config_bimanual_so100_follower.py
 create mode 100644 lerobot/common/robots/bimanual_so101_follower/__init__.py
 create mode 100644 lerobot/common/robots/bimanual_so101_follower/bimanual_so101_follower.py
 create mode 100644 lerobot/common/robots/bimanual_so101_follower/config_bimanual_so101_follower.py
 create mode 100644 lerobot/common/teleoperators/bimanual_so100_leader/__init__.py
 create mode 100644 lerobot/common/teleoperators/bimanual_so100_leader/bimanual_so100_leader.py
 create mode 100644 lerobot/common/teleoperators/bimanual_so100_leader/config_bimanual_so100_leader.py
 create mode 100644 lerobot/common/teleoperators/bimanual_so101_leader/__init__.py
 create mode 100644 lerobot/common/teleoperators/bimanual_so101_leader/bimanual_so101_leader.py
 create mode 100644 lerobot/common/teleoperators/bimanual_so101_leader/config_bimanual_so101_leader.py

diff --git a/lerobot/common/robots/bimanual_so100_follower/__init__.py b/lerobot/common/robots/bimanual_so100_follower/__init__.py
new file mode 100644
index 0000000..e7baf9c
--- /dev/null
+++ b/lerobot/common/robots/bimanual_so100_follower/__init__.py
@@ -0,0 +1,2 @@
+from .config_bimanual_so100_follower import BimanualSO100FollowerConfig
+from .bimanual_so100_follower import BimanualSO100Follower
diff --git a/lerobot/common/robots/bimanual_so100_follower/bimanual_so100_follower.py b/lerobot/common/robots/bimanual_so100_follower/bimanual_so100_follower.py
new file mode 100644
index 0000000..77fd18a
--- /dev/null
+++ b/lerobot/common/robots/bimanual_so100_follower/bimanual_so100_follower.py
@@ -0,0 +1,154 @@
+#!/usr/bin/env python
+
+# Copyright 2024 The HuggingFace Inc. team. All rights reserved.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+import logging
+import time
+from functools import cached_property
+from typing import Any
+
+from lerobot.common.cameras.utils import make_cameras_from_configs
+from lerobot.common.errors import DeviceAlreadyConnectedError, DeviceNotConnectedError
+
+from ..robot import Robot
+from .config_bimanual_so100_follower import BimanualSO100FollowerConfig
+
+from ..so100_follower import SO100Follower
+
+logger = logging.getLogger(__name__)
+
+
+class BimanualSO100Follower(Robot):
+    """
+    [SO-100 Follower Arm](https://github.com/TheRobotStudio/SO-ARM100) designed by TheRobotStudio
+    """
+
+    config_class = BimanualSO100FollowerConfig
+    name = "so100_follower"
+
+    def __init__(self, config: BimanualSO100FollowerConfig):
+        super().__init__(config)
+        self.config = config
+        self.left_arm = SO100Follower(config.left_arm)
+        self.right_arm = SO100Follower(config.right_arm)
+        self.cameras = make_cameras_from_configs(config.cameras)
+
+    @property
+    def _motors_ft(self) -> dict[str, type]:
+        left_motors_ft = self.left_arm._motors_ft
+        right_motors_ft = self.right_arm._motors_ft
+        combined_motors_ft = {}
+        for key in left_motors_ft:
+            combined_motors_ft[f"left_{key}"] = left_motors_ft[key]
+        for key in right_motors_ft:
+            combined_motors_ft[f"right_{key}"] = right_motors_ft[key]
+        return combined_motors_ft
+
+    @property
+    def _cameras_ft(self) -> dict[str, tuple]:
+        return {
+            cam: (self.config.cameras[cam].height, self.config.cameras[cam].width, 3) for cam in self.cameras
+        }
+
+    @cached_property
+    def observation_features(self) -> dict[str, type | tuple]:
+        return {**self._motors_ft, **self._cameras_ft}
+
+    @cached_property
+    def action_features(self) -> dict[str, type]:
+        return self._motors_ft
+
+    @property
+    def is_connected(self) -> bool:
+        return self.left_arm.is_connected and self.right_arm.is_connected and all(
+            cam.is_connected for cam in self.cameras.values()
+        )
+
+    def connect(self, calibrate: bool = True) -> None:
+        if self.is_connected:
+            raise DeviceAlreadyConnectedError(f"{self} already connected")
+        
+        self.left_arm.connect(calibrate=calibrate)
+        self.right_arm.connect(calibrate=calibrate)
+        for cam in self.cameras.values():
+            cam.connect()
+        
+        logger.info(f"{self} connected.")
+
+    @property
+    def is_calibrated(self) -> bool:
+        return self.left_arm.is_calibrated and self.right_arm.is_calibrated
+
+    def calibrate(self) -> None:
+        raise NotImplementedError("Calibration for BimanualSO100Follower is not implemented.")
+
+    def configure(self) -> None:
+        self.left_arm.configure()
+        self.right_arm.configure()
+        logger.info(f"{self} configured.")
+
+    def setup_motors(self) -> None:
+        self.left_arm.setup_motors()
+        self.right_arm.setup_motors()
+        logger.info(f"{self} motors setup complete.")
+
+    def get_observation(self) -> dict[str, Any]:
+        left_obs = self.left_arm.get_observation()
+        right_obs = self.right_arm.get_observation()
+        combined_obs = {}
+        for key in left_obs:
+            combined_obs[f"left_{key}"] = left_obs[key]
+        for key in right_obs:
+            combined_obs[f"right_{key}"] = right_obs[key]
+
+        # Capture images from cameras
+        for cam_key, cam in self.cameras.items():
+            start = time.perf_counter()
+            combined_obs[cam_key] = cam.async_read()
+            dt_ms = (time.perf_counter() - start) * 1e3
+            logger.debug(f"{self} read {cam_key}: {dt_ms:.1f}ms")
+        
+        return combined_obs
+
+    def send_action(self, action: dict[str, Any]) -> dict[str, Any]:
+        if not self.is_connected:
+            raise DeviceNotConnectedError(f"{self} is not connected.")
+
+        left_action = {key.removeprefix("left_"): val for key, val in action.items() if key.startswith("left_")}
+        right_action = {key.removeprefix("right_"): val for key, val in action.items() if key.startswith("right_")}
+
+        left_pos = self.left_arm.send_action(left_action)
+        right_pos = self.right_arm.send_action(right_action)
+
+        combined_action = {}
+        for key in left_pos:
+            combined_action[f"left_{key}"] = left_pos[key]
+        for key in right_pos:
+            combined_action[f"right_{key}"] = right_pos[key]
+        
+        logger.debug(f"{self} sent action: {combined_action}")
+
+        return combined_action
+
+    def disconnect(self):
+        if not self.is_connected:
+            raise DeviceNotConnectedError(f"{self} is not connected.")
+
+        self.left_arm.disconnect()
+        self.right_arm.disconnect()
+        for cam in self.cameras.values():
+            cam.disconnect()
+
+        logger.info(f"{self} disconnected.")
diff --git a/lerobot/common/robots/bimanual_so100_follower/config_bimanual_so100_follower.py b/lerobot/common/robots/bimanual_so100_follower/config_bimanual_so100_follower.py
new file mode 100644
index 0000000..fe54945
--- /dev/null
+++ b/lerobot/common/robots/bimanual_so100_follower/config_bimanual_so100_follower.py
@@ -0,0 +1,51 @@
+# Copyright 2024 The HuggingFace Inc. team. All rights reserved.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+from dataclasses import dataclass, field
+
+from lerobot.common.cameras import CameraConfig
+
+from ..config import RobotConfig
+
+from pathlib import Path
+
+
+@dataclass(kw_only=True)
+class BimanualSO100FollowerArmConfig():
+    # Allows to distinguish between different robots of the same type
+    id: str | None = None
+    # Directory to store calibration file
+    calibration_dir: Path | None = None
+
+    # Port to connect to the arm
+    port: str
+
+    disable_torque_on_disconnect: bool = True
+
+    # `max_relative_target` limits the magnitude of the relative positional target vector for safety purposes.
+    # Set this to a positive scalar to have the same value for all motors, or a list that is the same length as
+    # the number of motors in your follower arms.
+    max_relative_target: int | None = None
+
+    # Set to `True` for backward compatibility with previous policies/dataset
+    use_degrees: bool = False
+
+    cameras: dict[str, CameraConfig] = field(default_factory=dict)
+
+@RobotConfig.register_subclass("bimanual_so100_follower")
+@dataclass
+class BimanualSO100FollowerConfig(RobotConfig):
+    left_arm: BimanualSO100FollowerArmConfig = field(default_factory=lambda: BimanualSO100FollowerArmConfig(port="/dev/ttyUSB0"))
+    right_arm: BimanualSO100FollowerArmConfig = field(default_factory=lambda: BimanualSO100FollowerArmConfig(port="/dev/ttyUSB1"))
+    cameras: dict[str, CameraConfig] = field(default_factory=dict)
diff --git a/lerobot/common/robots/bimanual_so101_follower/__init__.py b/lerobot/common/robots/bimanual_so101_follower/__init__.py
new file mode 100644
index 0000000..9001d61
--- /dev/null
+++ b/lerobot/common/robots/bimanual_so101_follower/__init__.py
@@ -0,0 +1,3 @@
+from .bimanual_so101_follower import BimanualSO101Follower
+
+__all__ = ["BimanualSO101Follower"]
\ No newline at end of file
diff --git a/lerobot/common/robots/bimanual_so101_follower/bimanual_so101_follower.py b/lerobot/common/robots/bimanual_so101_follower/bimanual_so101_follower.py
new file mode 100644
index 0000000..5e2d5a1
--- /dev/null
+++ b/lerobot/common/robots/bimanual_so101_follower/bimanual_so101_follower.py
@@ -0,0 +1,154 @@
+#!/usr/bin/env python
+
+# Copyright 2025 The HuggingFace Inc. team. All rights reserved.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+import logging
+import time
+from functools import cached_property
+from typing import Any
+
+from lerobot.common.cameras.utils import make_cameras_from_configs
+from lerobot.common.errors import DeviceAlreadyConnectedError, DeviceNotConnectedError
+
+from ..robot import Robot
+from .config_bimanual_so101_follower import BimanualSO101FollowerConfig
+
+from ..so101_follower import SO101Follower
+
+logger = logging.getLogger(__name__)
+
+
+class BimanualSO101Follower(Robot):
+    """
+    Bimanual SO-101 Follower Arms designed by TheRobotStudio and Hugging Face.
+    """
+
+    config_class = BimanualSO101FollowerConfig
+    name = "bimanual_so101_follower"
+
+    def __init__(self, config: BimanualSO101FollowerConfig):
+        super().__init__(config)
+        self.config = config
+        self.left_arm = SO101Follower(config.left_arm)
+        self.right_arm = SO101Follower(config.right_arm)
+        self.cameras = make_cameras_from_configs(config.cameras)
+
+    @property
+    def _motors_ft(self) -> dict[str, type]:
+        left_motors_ft = self.left_arm._motors_ft
+        right_motors_ft = self.right_arm._motors_ft
+        combined_motors_ft = {}
+        for key in left_motors_ft:
+            combined_motors_ft[f"left_{key}"] = left_motors_ft[key]
+        for key in right_motors_ft:
+            combined_motors_ft[f"right_{key}"] = right_motors_ft[key]
+        return combined_motors_ft
+
+    @property
+    def _cameras_ft(self) -> dict[str, tuple]:
+        return {
+            cam: (self.config.cameras[cam].height, self.config.cameras[cam].width, 3) for cam in self.cameras
+        }
+
+    @cached_property
+    def observation_features(self) -> dict[str, type | tuple]:
+        return {**self._motors_ft, **self._cameras_ft}
+
+    @cached_property
+    def action_features(self) -> dict[str, type]:
+        return self._motors_ft
+
+    @property
+    def is_connected(self) -> bool:
+        return self.left_arm.is_connected and self.right_arm.is_connected and all(
+            cam.is_connected for cam in self.cameras.values()
+        )
+
+    def connect(self, calibrate: bool = True) -> None:
+        if self.is_connected:
+            raise DeviceAlreadyConnectedError(f"{self} already connected")
+        
+        self.left_arm.connect(calibrate=calibrate)
+        self.right_arm.connect(calibrate=calibrate)
+        for cam in self.cameras.values():
+            cam.connect()
+        
+        logger.info(f"{self} connected.")
+
+    @property
+    def is_calibrated(self) -> bool:
+        return self.left_arm.is_calibrated and self.right_arm.is_calibrated
+
+    def calibrate(self) -> None:
+        raise NotImplementedError("Calibration for BimanualSO101Follower is not implemented.")
+
+    def configure(self) -> None:
+        self.left_arm.configure()
+        self.right_arm.configure()
+        logger.info(f"{self} configured.")
+
+    def setup_motors(self) -> None:
+        self.left_arm.setup_motors()
+        self.right_arm.setup_motors()
+        logger.info(f"{self} motors setup complete.")
+
+    def get_observation(self) -> dict[str, Any]:
+        left_obs = self.left_arm.get_observation()
+        right_obs = self.right_arm.get_observation()
+        combined_obs = {}
+        for key in left_obs:
+            combined_obs[f"left_{key}"] = left_obs[key]
+        for key in right_obs:
+            combined_obs[f"right_{key}"] = right_obs[key]
+
+        # Capture images from cameras
+        for cam_key, cam in self.cameras.items():
+            start = time.perf_counter()
+            combined_obs[cam_key] = cam.async_read()
+            dt_ms = (time.perf_counter() - start) * 1e3
+            logger.debug(f"{self} read {cam_key}: {dt_ms:.1f}ms")
+        
+        return combined_obs
+
+    def send_action(self, action: dict[str, Any]) -> dict[str, Any]:
+        if not self.is_connected:
+            raise DeviceNotConnectedError(f"{self} is not connected.")
+
+        left_action = {key.removeprefix("left_"): val for key, val in action.items() if key.startswith("left_")}
+        right_action = {key.removeprefix("right_"): val for key, val in action.items() if key.startswith("right_")}
+
+        left_pos = self.left_arm.send_action(left_action)
+        right_pos = self.right_arm.send_action(right_action)
+
+        combined_action = {}
+        for key in left_pos:
+            combined_action[f"left_{key}"] = left_pos[key]
+        for key in right_pos:
+            combined_action[f"right_{key}"] = right_pos[key]
+        
+        logger.debug(f"{self} sent action: {combined_action}")
+
+        return combined_action
+
+    def disconnect(self):
+        if not self.is_connected:
+            raise DeviceNotConnectedError(f"{self} is not connected.")
+
+        self.left_arm.disconnect()
+        self.right_arm.disconnect()
+        for cam in self.cameras.values():
+            cam.disconnect()
+
+        logger.info(f"{self} disconnected.")
\ No newline at end of file
diff --git a/lerobot/common/robots/bimanual_so101_follower/config_bimanual_so101_follower.py b/lerobot/common/robots/bimanual_so101_follower/config_bimanual_so101_follower.py
new file mode 100644
index 0000000..d7384e4
--- /dev/null
+++ b/lerobot/common/robots/bimanual_so101_follower/config_bimanual_so101_follower.py
@@ -0,0 +1,51 @@
+# Copyright 2025 The HuggingFace Inc. team. All rights reserved.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+from dataclasses import dataclass, field
+
+from lerobot.common.cameras import CameraConfig
+
+from ..config import RobotConfig
+
+from pathlib import Path
+
+
+@dataclass(kw_only=True)
+class BimanualSO101FollowerArmConfig():
+    # Allows to distinguish between different robots of the same type
+    id: str | None = None
+    # Directory to store calibration file
+    calibration_dir: Path | None = None
+
+    # Port to connect to the arm
+    port: str
+
+    disable_torque_on_disconnect: bool = True
+
+    # `max_relative_target` limits the magnitude of the relative positional target vector for safety purposes.
+    # Set this to a positive scalar to have the same value for all motors, or a list that is the same length as
+    # the number of motors in your follower arms.
+    max_relative_target: int | None = None
+
+    # Set to `True` for backward compatibility with previous policies/dataset
+    use_degrees: bool = False
+
+    cameras: dict[str, CameraConfig] = field(default_factory=dict)
+
+@RobotConfig.register_subclass("bimanual_so101_follower")
+@dataclass
+class BimanualSO101FollowerConfig(RobotConfig):
+    left_arm: BimanualSO101FollowerArmConfig = field(default_factory=lambda: BimanualSO101FollowerArmConfig(port="/dev/ttyUSB0"))
+    right_arm: BimanualSO101FollowerArmConfig = field(default_factory=lambda: BimanualSO101FollowerArmConfig(port="/dev/ttyUSB1"))
+    cameras: dict[str, CameraConfig] = field(default_factory=dict)
\ No newline at end of file
diff --git a/lerobot/common/robots/utils.py b/lerobot/common/robots/utils.py
index d100c83..8779a07 100644
--- a/lerobot/common/robots/utils.py
+++ b/lerobot/common/robots/utils.py
@@ -49,6 +49,14 @@ def make_robot_from_config(config: RobotConfig) -> Robot:
         from tests.mocks.mock_robot import MockRobot
 
         return MockRobot(config)
+    elif config.type == "bimanual_so100_follower":
+        from .bimanual_so100_follower import BimanualSO100Follower
+
+        return BimanualSO100Follower(config)
+    elif config.type == "bimanual_so101_follower":
+        from .bimanual_so101_follower import BimanualSO101Follower
+
+        return BimanualSO101Follower(config)
     else:
         raise ValueError(config.type)
 
diff --git a/lerobot/common/teleoperators/bimanual_so100_leader/__init__.py b/lerobot/common/teleoperators/bimanual_so100_leader/__init__.py
new file mode 100644
index 0000000..ae0248e
--- /dev/null
+++ b/lerobot/common/teleoperators/bimanual_so100_leader/__init__.py
@@ -0,0 +1,2 @@
+from .config_bimanual_so100_leader import BimanualSO100LeaderConfig
+from .bimanual_so100_leader import BimanualSO100Leader
diff --git a/lerobot/common/teleoperators/bimanual_so100_leader/bimanual_so100_leader.py b/lerobot/common/teleoperators/bimanual_so100_leader/bimanual_so100_leader.py
new file mode 100644
index 0000000..d7233d2
--- /dev/null
+++ b/lerobot/common/teleoperators/bimanual_so100_leader/bimanual_so100_leader.py
@@ -0,0 +1,110 @@
+#!/usr/bin/env python
+
+# Copyright 2024 The HuggingFace Inc. team. All rights reserved.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+import logging
+
+from lerobot.common.errors import DeviceAlreadyConnectedError, DeviceNotConnectedError
+
+from ..teleoperator import Teleoperator
+from .config_bimanual_so100_leader import BimanualSO100LeaderConfig
+
+from ..so100_leader import SO100Leader
+
+logger = logging.getLogger(__name__)
+
+
+class BimanualSO100Leader(Teleoperator):
+    """
+    [SO-100 Leader Arm](https://github.com/TheRobotStudio/SO-ARM100) designed by TheRobotStudio
+    """
+
+    config_class = BimanualSO100LeaderConfig
+    name = "bimanual_so100_leader"
+
+    def __init__(self, config: BimanualSO100LeaderConfig):
+        super().__init__(config)
+        self.config = config
+        self.left_arm = SO100Leader(config.left_arm)
+        self.right_arm = SO100Leader(config.right_arm)
+
+    @property
+    def action_features(self) -> dict[str, type]:
+        left_action_features = self.left_arm.action_features
+        right_action_features = self.right_arm.action_features
+        combined_action_features = {}
+        for key in left_action_features:
+            combined_action_features[f"left_{key}"] = left_action_features[key]
+        for key in right_action_features:
+            combined_action_features[f"right_{key}"] = right_action_features[key]
+        return combined_action_features
+
+    @property
+    def feedback_features(self) -> dict[str, type]:
+        return {}
+
+    @property
+    def is_connected(self) -> bool:
+        return self.left_arm.is_connected and self.right_arm.is_connected
+
+    def connect(self, calibrate: bool = True) -> None:
+        if self.is_connected:
+            raise DeviceAlreadyConnectedError(f"{self} already connected")
+        
+        self.left_arm.connect(calibrate=calibrate)
+        self.right_arm.connect(calibrate=calibrate)
+
+        logger.info(f"{self} connected.")
+
+    @property
+    def is_calibrated(self) -> bool:
+        return self.bus.is_calibrated
+    
+    def calibrate(self) -> None:
+        raise NotImplementedError("Calibration for BimanualSO100Leader is not implemented.")
+
+
+    def configure(self) -> None:
+        self.left_arm.configure()
+        self.right_arm.configure()
+        logger.info(f"{self} configured.")
+
+    def setup_motors(self) -> None:
+        self.left_arm.setup_motors()
+        self.right_arm.setup_motors()
+        logger.info(f"{self} motors setup complete.")
+
+    def get_action(self) -> dict[str, float]:
+        left_action = self.left_arm.get_action()
+        right_action = self.right_arm.get_action()
+        combined_action = {}
+        for key in left_action:
+            combined_action[f"left_{key}"] = left_action[key]
+        for key in right_action:
+            combined_action[f"right_{key}"] = right_action[key]
+        logger.debug(f"{self} combined action: {combined_action}")
+        return combined_action
+
+    def send_feedback(self, feedback: dict[str, float]) -> None:
+        # TODO(rcadene, aliberts): Implement force feedback
+        raise NotImplementedError
+
+    def disconnect(self) -> None:
+        if not self.is_connected:
+            DeviceNotConnectedError(f"{self} is not connected.")
+
+        self.left_arm.disconnect()
+        self.right_arm.disconnect()
+        logger.info(f"{self} disconnected.")
diff --git a/lerobot/common/teleoperators/bimanual_so100_leader/config_bimanual_so100_leader.py b/lerobot/common/teleoperators/bimanual_so100_leader/config_bimanual_so100_leader.py
new file mode 100644
index 0000000..8cd57e5
--- /dev/null
+++ b/lerobot/common/teleoperators/bimanual_so100_leader/config_bimanual_so100_leader.py
@@ -0,0 +1,36 @@
+#!/usr/bin/env python
+
+# Copyright 2024 The HuggingFace Inc. team. All rights reserved.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+from dataclasses import dataclass, field
+
+from ..config import TeleoperatorConfig
+
+from pathlib import Path
+
+@dataclass(kw_only=True)
+class BimanualSO100LeaderArmConfig():
+    # Allows to distinguish between different teleoperators of the same type
+    id: str | None = None
+    # Directory to store calibration file
+    calibration_dir: Path | None = None
+    # Port to connect to the arm
+    port: str
+
+@TeleoperatorConfig.register_subclass("bimanual_so100_leader")
+@dataclass
+class BimanualSO100LeaderConfig(TeleoperatorConfig):
+    left_arm: BimanualSO100LeaderArmConfig = field(default_factory=lambda: BimanualSO100LeaderArmConfig(port="/dev/ttyUSB0"))
+    right_arm: BimanualSO100LeaderArmConfig = field(default_factory=lambda: BimanualSO100LeaderArmConfig(port="/dev/ttyUSB1"))
diff --git a/lerobot/common/teleoperators/bimanual_so101_leader/__init__.py b/lerobot/common/teleoperators/bimanual_so101_leader/__init__.py
new file mode 100644
index 0000000..7ec8f02
--- /dev/null
+++ b/lerobot/common/teleoperators/bimanual_so101_leader/__init__.py
@@ -0,0 +1,3 @@
+from .bimanual_so101_leader import BimanualSO101Leader
+
+__all__ = ["BimanualSO101Leader"]
\ No newline at end of file
diff --git a/lerobot/common/teleoperators/bimanual_so101_leader/bimanual_so101_leader.py b/lerobot/common/teleoperators/bimanual_so101_leader/bimanual_so101_leader.py
new file mode 100644
index 0000000..9c9fb20
--- /dev/null
+++ b/lerobot/common/teleoperators/bimanual_so101_leader/bimanual_so101_leader.py
@@ -0,0 +1,109 @@
+#!/usr/bin/env python
+
+# Copyright 2025 The HuggingFace Inc. team. All rights reserved.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+import logging
+
+from lerobot.common.errors import DeviceAlreadyConnectedError, DeviceNotConnectedError
+
+from ..teleoperator import Teleoperator
+from .config_bimanual_so101_leader import BimanualSO101LeaderConfig
+
+from ..so101_leader import SO101Leader
+
+logger = logging.getLogger(__name__)
+
+
+class BimanualSO101Leader(Teleoperator):
+    """
+    Bimanual SO-101 Leader Arms designed by TheRobotStudio and Hugging Face.
+    """
+
+    config_class = BimanualSO101LeaderConfig
+    name = "bimanual_so101_leader"
+
+    def __init__(self, config: BimanualSO101LeaderConfig):
+        super().__init__(config)
+        self.config = config
+        self.left_arm = SO101Leader(config.left_arm)
+        self.right_arm = SO101Leader(config.right_arm)
+
+    @property
+    def action_features(self) -> dict[str, type]:
+        left_action_features = self.left_arm.action_features
+        right_action_features = self.right_arm.action_features
+        combined_action_features = {}
+        for key in left_action_features:
+            combined_action_features[f"left_{key}"] = left_action_features[key]
+        for key in right_action_features:
+            combined_action_features[f"right_{key}"] = right_action_features[key]
+        return combined_action_features
+
+    @property
+    def feedback_features(self) -> dict[str, type]:
+        return {}
+
+    @property
+    def is_connected(self) -> bool:
+        return self.left_arm.is_connected and self.right_arm.is_connected
+
+    def connect(self, calibrate: bool = True) -> None:
+        if self.is_connected:
+            raise DeviceAlreadyConnectedError(f"{self} already connected")
+        
+        self.left_arm.connect(calibrate=calibrate)
+        self.right_arm.connect(calibrate=calibrate)
+
+        logger.info(f"{self} connected.")
+
+    @property
+    def is_calibrated(self) -> bool:
+        return self.left_arm.is_calibrated and self.right_arm.is_calibrated
+    
+    def calibrate(self) -> None:
+        raise NotImplementedError("Calibration for BimanualSO101Leader is not implemented.")
+
+    def configure(self) -> None:
+        self.left_arm.configure()
+        self.right_arm.configure()
+        logger.info(f"{self} configured.")
+
+    def setup_motors(self) -> None:
+        self.left_arm.setup_motors()
+        self.right_arm.setup_motors()
+        logger.info(f"{self} motors setup complete.")
+
+    def get_action(self) -> dict[str, float]:
+        left_action = self.left_arm.get_action()
+        right_action = self.right_arm.get_action()
+        combined_action = {}
+        for key in left_action:
+            combined_action[f"left_{key}"] = left_action[key]
+        for key in right_action:
+            combined_action[f"right_{key}"] = right_action[key]
+        logger.debug(f"{self} combined action: {combined_action}")
+        return combined_action
+
+    def send_feedback(self, feedback: dict[str, float]) -> None:
+        # TODO(rcadene, aliberts): Implement force feedback
+        raise NotImplementedError
+
+    def disconnect(self) -> None:
+        if not self.is_connected:
+            DeviceNotConnectedError(f"{self} is not connected.")
+
+        self.left_arm.disconnect()
+        self.right_arm.disconnect()
+        logger.info(f"{self} disconnected.")
\ No newline at end of file
diff --git a/lerobot/common/teleoperators/bimanual_so101_leader/config_bimanual_so101_leader.py b/lerobot/common/teleoperators/bimanual_so101_leader/config_bimanual_so101_leader.py
new file mode 100644
index 0000000..4690dce
--- /dev/null
+++ b/lerobot/common/teleoperators/bimanual_so101_leader/config_bimanual_so101_leader.py
@@ -0,0 +1,36 @@
+#!/usr/bin/env python
+
+# Copyright 2025 The HuggingFace Inc. team. All rights reserved.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+from dataclasses import dataclass, field
+
+from ..config import TeleoperatorConfig
+
+from pathlib import Path
+
+@dataclass(kw_only=True)
+class BimanualSO101LeaderArmConfig():
+    # Allows to distinguish between different teleoperators of the same type
+    id: str | None = None
+    # Directory to store calibration file
+    calibration_dir: Path | None = None
+    # Port to connect to the arm
+    port: str
+
+@TeleoperatorConfig.register_subclass("bimanual_so101_leader")
+@dataclass
+class BimanualSO101LeaderConfig(TeleoperatorConfig):
+    left_arm: BimanualSO101LeaderArmConfig = field(default_factory=lambda: BimanualSO101LeaderArmConfig(port="/dev/ttyUSB0"))
+    right_arm: BimanualSO101LeaderArmConfig = field(default_factory=lambda: BimanualSO101LeaderArmConfig(port="/dev/ttyUSB1"))
\ No newline at end of file
diff --git a/lerobot/common/teleoperators/utils.py b/lerobot/common/teleoperators/utils.py
index 4942084..8729fbe 100644
--- a/lerobot/common/teleoperators/utils.py
+++ b/lerobot/common/teleoperators/utils.py
@@ -45,5 +45,13 @@ def make_teleoperator_from_config(config: TeleoperatorConfig) -> Teleoperator:
         from tests.mocks.mock_teleop import MockTeleop
 
         return MockTeleop(config)
+    elif config.type == "bimanual_so100_leader":
+        from .bimanual_so100_leader import BimanualSO100Leader
+
+        return BimanualSO100Leader(config)
+    elif config.type == "bimanual_so101_leader":
+        from .bimanual_so101_leader import BimanualSO101Leader
+
+        return BimanualSO101Leader(config)
     else:
         raise ValueError(config.type)
diff --git a/lerobot/record.py b/lerobot/record.py
index 531846f..9ec3b8d 100644
--- a/lerobot/record.py
+++ b/lerobot/record.py
@@ -58,6 +58,7 @@ from lerobot.common.robots import (  # noqa: F401
     make_robot_from_config,
     so100_follower,
     so101_follower,
+    bimanual_so100_follower,
 )
 from lerobot.common.teleoperators import (  # noqa: F401
     Teleoperator,
@@ -81,7 +82,7 @@ from lerobot.common.utils.visualization_utils import _init_rerun
 from lerobot.configs import parser
 from lerobot.configs.policies import PreTrainedConfig
 
-from .common.teleoperators import koch_leader, so100_leader, so101_leader  # noqa: F401
+from .common.teleoperators import koch_leader, so100_leader, so101_leader, bimanual_so100_leader  # noqa: F401
 
 
 @dataclass
diff --git a/lerobot/teleoperate.py b/lerobot/teleoperate.py
index 97e6104..6471783 100644
--- a/lerobot/teleoperate.py
+++ b/lerobot/teleoperate.py
@@ -48,6 +48,7 @@ from lerobot.common.robots import (  # noqa: F401
     make_robot_from_config,
     so100_follower,
     so101_follower,
+    bimanual_so100_follower,
 )
 from lerobot.common.teleoperators import (
     Teleoperator,
@@ -58,7 +59,7 @@ from lerobot.common.utils.robot_utils import busy_wait
 from lerobot.common.utils.utils import init_logging, move_cursor_up
 from lerobot.common.utils.visualization_utils import _init_rerun
 
-from .common.teleoperators import koch_leader, so100_leader, so101_leader  # noqa: F401
+from .common.teleoperators import koch_leader, so100_leader, so101_leader, bimanual_so100_leader  # noqa: F401
 
 
 @dataclass
-- 
2.39.3 (Apple Git-146)

